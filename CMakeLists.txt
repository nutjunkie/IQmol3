cmake_minimum_required(VERSION 3.14.4)

set(targetName IQmol)
project(${targetName} VERSION 3.0.0 LANGUAGES CXX C Fortran)

if (UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

include(FortranCInterface)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

list(APPEND CMAKE_MODULE_PATH "${${targetName}_SOURCE_DIR}/cmake")

find_package(Qt5 COMPONENTS Core Gui Xml PrintSupport Widgets OpenGL REQUIRED)
find_package(Threads   REQUIRED)
find_package(OpenGL    REQUIRED)
include(FetchContent)
include(cmake/AddZlib.cmake)
include(cmake/AddQGLViewer.cmake)
include(cmake/AddLibSsh2.cmake)
include(cmake/AddOpenMesh.cmake)
include(cmake/AddYamlCpp.cmake)
include(cmake/AddOpenBabel3.cmake)

if(QARCHIVE)
   include(cmake/AddHDF5.cmake)
   include(cmake/AddHighFive.cmake)
   add_compile_definitions(WITH_AVIEW QARCHIVE)
   include_directories(qarchive/libctx)
   include_directories(qarchive/libaview)
   include_directories(qarchive/libstore)
   include_directories(qarchive/libarchive)
   include_directories(${CMAKE_CURRENT_BINARY_DIR}/qarchive/libarchive/autogen_impl)
   add_subdirectory(qarchive)
endif(QARCHIVE)

# The following must come after the modules as it picks up the include 
# for the system libssh2.h.
set(Boost_USE_STATIC_LIBS TRUE)
find_package(Boost COMPONENTS iostreams serialization REQUIRED)
include_directories(${Boost_INCLUDE_DIRS})

enable_testing()

add_subdirectory(src)
if (${Qt5Core_VERSION_STRING} VERSION_GREATER_EQUAL 5.15 )
   qt_add_resources(IQmol_RESOURCES_RCC resources/IQmol.qrc)
else ()
   qt5_add_resources(IQmol_RESOURCES_RCC resources/IQmol.qrc)
endif ()

set(ICON_PATH resources/IQmol.icns)

if (APPLE)
   add_executable(${targetName} 
      MACOSX_BUNDLE
      ${ICON_PATH}
      src/main.C
      ${IQmol_RESOURCES_RCC}
   )
   set_source_files_properties(${ICON_PATH} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
   file(COPY ${ICON_PATH} DESTINATION "bin/${targetName}.app/Contents/Resources")
   file(COPY resources/crtimgseq.py DESTINATION "bin/${targetName}.app/Contents/Resources")
   add_custom_command(TARGET ${targetName} POST_BUILD COMMAND ${CMAKE_COMMAND} -E 
      copy_directory ${CMAKE_SOURCE_DIR}/share ${CMAKE_BINARY_DIR}/bin/${targetName}.app/Contents/share/)
   add_custom_command(TARGET ${targetName} POST_BUILD COMMAND ${CMAKE_COMMAND} -E 
      copy_directory ${CMAKE_SOURCE_DIR}/modules/openbabel/data 
                     ${CMAKE_BINARY_DIR}/bin/${targetName}.app/Contents/share/openbabel
   )
#   add_custom_command(TARGET ${targetName} POST_BUILD 
#      COMMAND macdeployqt ${CMAKE_BINARY_DIR}/bin/${targetName}.app)
endif(APPLE)

if (LINUX)
   add_executable(${targetName} 
      src/main.C
      ${IQmol_RESOURCES_RCC}
   )
endif (LINUX)

# The following is required to link gfortran statically, and was working before
# the compiler update.
#unset(CMAKE_Fortran_IMPLICIT_LINK_LIBRARIES)
#SET_TARGET_PROPERTIES(${targetName} PROPERTIES LINKER_LANGUAGE "CXX"
#  LINK_FLAGS
#  "/opt/homebrew/Cellar/gcc/11.3.0_2/lib/gcc/11/libgfortran.a 
#   /opt/homebrew/Cellar/gcc/11.3.0_2/lib/gcc/11/libquadmath.a  
#)

add_dependencies(Old Configurator)
add_dependencies(Process Configurator)
add_dependencies(Viewer Old Process)

target_link_libraries (${targetName}
   Configurator
   Data
   Util
   Grid
   Layer
   Main
   Network
   Old 
   Parser
   Plot
   Process
   Qui 
   Math
   Viewer
   openbabel
   libssh2
   yaml-cpp
   OpenMeshCoreStatic
   OpenMeshToolsStatic
   QGLViewer
   Qt5::Core
   Qt5::Gui
   Qt5::Xml
   Qt5::PrintSupport
   Qt5::Widgets
   Qt5::OpenGL
   ${Boost_LIBRARIES}
   ${LIBSSH2_LIBRARY}
   ${OPENGL_LIBRARIES}
)

if(QARCHIVE)
   target_link_libraries (${targetName} archive_impl ${ARMADILLO_LIBRARY})
else(QARCHIVE)
#   target_link_libraries (${targetName} hdf5-static)
   target_link_libraries (${targetName} )
endif(QARCHIVE)
