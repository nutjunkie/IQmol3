cmake_minimum_required(VERSION 3.14.4)

set(targetName IQmol)
project(${targetName} VERSION 3.1.1 LANGUAGES CXX C Fortran)

include(FortranCInterface)
#FortranCInterface_VERIFY(CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_BUILD_TYPE Debug)
#set(CMAKE_BUILD_TYPE Release)

set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wno-deprecated")

if (APPLE)
   # symbols not in the Qt libraries
   #set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -arch x86_64 -arch arm64")
elseif (UNIX)
   set(LINUX TRUE)
endif()

if(NOT LINUX)
   set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
endif()

# We need this to be able to include e.g. "Data/Bank.h" in the sources
include_directories(src)
# and this to access autogenerated files 
include_directories(${CMAKE_CURRENT_BINARY_DIR}/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)


find_package(Qt5 COMPONENTS Core Gui Xml PrintSupport Widgets OpenGL Sql REQUIRED)

find_package(ZLIB REQUIRED)
if(ZLIB_FOUND)
   include_directories(${ZLIB_INCLUDE_DIRS})
endif()



find_package(Threads REQUIRED)
find_package(OpenGL  REQUIRED)
find_package(OpenSSL REQUIRED)

if(NOT LINUX)
   find_package(ZSTD    REQUIRED)

   # No CMakeLists.txt for libQGLViewer
   include_directories(modules/libQGLViewer)
   add_subdirectory(modules  EXCLUDE_FROM_ALL)

   include_directories(modules/libssh2/include)
   add_subdirectory(modules/libssh2  EXCLUDE_FROM_ALL)

   include_directories(modules/openmesh/src)
   add_subdirectory(modules/openmesh  EXCLUDE_FROM_ALL)
   set(OPENMESH_LIBRARIES OpenMeshCoreStatic OpenMeshToolsStatic)

   include_directories(modules/yaml-cpp/include)
   add_subdirectory(modules/yaml-cpp  EXCLUDE_FROM_ALL)

   include_directories(modules/openbabel/include)
   include_directories(${CMAKE_CURRENT_BINARY_DIR}/modules/openbabel/include)
   add_subdirectory(modules/openbabel  EXCLUDE_FROM_ALL)

   add_subdirectory(modules/libarchive EXCLUDE_FROM_ALL)
else()
   find_package(OpenBabel3 REQUIRED)
   find_package(OpenMesh REQUIRED)
endif()

if (WITH_GROMACS)
   add_compile_definitions(GROMACS)
   add_subdirectory(src/Gromacs)
endif()


if(QARCHIVE)
   #set(HDF5_USE_STATIC_LIBRARIES 1)
   #include_directories(modules/hdf5/src)
   #add_subdirectory(modules/hdf5  EXCLUDE_FROM_ALL)
   #include_directories(/opt/homebrew/Cellar/hdf5/1.12.2/include)
   #include_directories(modules/HighFive/include)
   #add_subdirectory(modules/HighFive  EXCLUDE_FROM_ALL)

   set(ARMADILLO_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/qarchive/armadillo/include)
   find_package(HDF5 REQUIRED)
#  find_package(Armadillo REQUIRED)

   add_compile_definitions(WITH_AVIEW QARCHIVE)
   include_directories(qarchive/libctx)
   include_directories(qarchive/libaview)
   include_directories(qarchive/libstore)
   include_directories(qarchive/libarchive)
   include_directories(${CMAKE_CURRENT_BINARY_DIR}/qarchive/libarchive/autogen_impl)
   add_subdirectory(qarchive)
endif(QARCHIVE)

# The following must come after the modules as it picks up the include 
# for the system libssh2.h.
#set(Boost_USE_STATIC_LIBS TRUE)
find_package(Boost REQUIRED COMPONENTS headers)
include_directories(${Boost_INCLUDE_DIRS})


set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)

add_subdirectory(src)

enable_testing()

if (${Qt5Core_VERSION_STRING} VERSION_GREATER_EQUAL 5.15 )
   qt_add_resources(IQmol_RESOURCES_RCC resources/IQmol.qrc)
else ()
   qt5_add_resources(IQmol_RESOURCES_RCC resources/IQmol.qrc)
endif ()

set(ICON_PATH resources/IQmol.icns)

# The following are required for libzstd
if (EXISTS /opt/local/lib/)
   link_directories(/opt/local/lib/)
elseif (EXISTS /opt/homebrew/lib/)
   link_directories(/opt/homebrew/lib/)
endif()


if (APPLE)
   add_executable(${targetName} 
      MACOSX_BUNDLE
      ${ICON_PATH}
      src/main.C
      ${IQmol_RESOURCES_RCC}
   )
   set_source_files_properties(${ICON_PATH} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
   file(COPY ${ICON_PATH} DESTINATION "bin/${targetName}.app/Contents/Resources")
   file(COPY resources/crtimgseq.py DESTINATION "bin/${targetName}.app/Contents/Resources")
   add_custom_command(TARGET ${targetName} POST_BUILD COMMAND ${CMAKE_COMMAND} -E 
      copy_directory ${CMAKE_SOURCE_DIR}/share ${CMAKE_BINARY_DIR}/bin/${targetName}.app/Contents/share/)
   add_custom_command(TARGET ${targetName} POST_BUILD COMMAND ${CMAKE_COMMAND} -E 
      copy_directory ${CMAKE_SOURCE_DIR}/modules/openbabel/data 
                     ${CMAKE_BINARY_DIR}/bin/${targetName}.app/Contents/share/openbabel
   )
#   add_custom_command(TARGET ${targetName} POST_BUILD 
#      COMMAND macdeployqt ${CMAKE_BINARY_DIR}/bin/${targetName}.app)
endif(APPLE)


if (LINUX)
   add_executable(${targetName} 
      src/main.C
      ${IQmol_RESOURCES_RCC}
   )

   target_link_libraries(${targetName} -static-libgcc -static-libstdc++)
endif (LINUX)


if (WIN32)
   set(WIN32_RESOURCES ${CMAKE_CURRENT_SOURCE_DIR}/resources/windows.rc)
   enable_language("RC")

   add_executable(${targetName} 
      src/main.C
      ${IQmol_RESOURCES_RCC}
      ${WIN32_RESOURCES}
   )
   set_target_properties(${targetName} PROPERTIES WIN32_EXECUTABLE ON)
endif (WIN32)


target_link_libraries (${targetName}
   Main
   Process
   Parser
   Network
   Qui 
   Layer
   Viewer
   Configurator
   Data
   Grid
   Util
   Math
   Plot
   Fort
   yaml-cpp
   openbabel
   QGLViewer
   Qt5::Core
   Qt5::Gui
   Qt5::Xml
   Qt5::PrintSupport
   Qt5::Widgets
   Qt5::OpenGL
   Qt5::Sql
   ${OPENMESH_LIBRARIES}
#   ${Boost_LIBRARIES}
   ${LIBSSH2_LIBRARY}
   ${OPENGL_LIBRARIES}
   ${ZLIB_LIBRARIES}
   ${FORTRAN_LIBRARIES}
   archive
)

if(NOT LINUX)
   target_link_libraries(${targetName} libssh2 ${LIBSSH2_LIBRARY})
else()
   target_link_libraries(${targetName} Amber ssh2 OpenMeshTools zstd)
endif()

if(QARCHIVE)
   target_link_libraries (${targetName} archive_impl ${ARMADILLO_LIBRARY})
else(QARCHIVE)
#   target_link_libraries (${targetName} hdf5-static)
endif(QARCHIVE)
